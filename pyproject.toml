[project]
name = "pylanetary"

version = "0.1.0"
description = "data processing and modeling tools for ring, moon, and planet observations"
readme = "README.rst"
requires-python = ">=3.9"
license = {file = "licenses/LICENSE.txt"}
keywords = ["astronomy", "astrophysics", "astropy", "solar system", "planetary", "planet"]
authors = [
  {name = "Ned Molter", email = "ned.molter@gmail.com" }
]
maintainers = [
  {name = "Ned Molter", email = "ned.molter@gmail.com" }
]

# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [  
  "Development Status :: 3 - Alpha",

  # Indicate who your project is intended for
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Astronomy",

  # Pick your license as you wish
  "License :: OSI Approved :: GNU General Public License (GPL)",

  # Specify the Python versions you support here. These classifiers are *not*
  # checked by "pip install". See instead "python_requires" below.
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
]

dependencies = [
  "astropy>=4.3.0",
  "astroquery<=0.4.7.dev8893,>=0.4.7.dev8479",
  "beautifulsoup4>=4.11.1",
  "cartopy",
  "extension_helpers>=1.0.0",
  "h5py>=3.0.0",
  "image_registration>=0.2.8",
  "matplotlib>=3.5.1",
  "numpy>=1.21.6",
  "photutils>=1.3.0",
  "pytest>=6.2.4",
  "pytest_astropy_header>=0.2.2",
  "pyyaml",
  "scikit-image>=0.18.3",
  "scipy>=1.7.0",
  "setuptools>=68.0.0",
  "setuptools_scm>=7.0.5",
  "sphinx_astropy>=1.7.0",
  "sphinx-pyproject",
  "nbsphinx",
]

[project.optional-dependencies] 
test = ["pytest-astropy"]
docs = ["sphinx-astropy", "sphinx-pyproject"]

[project.urls]
"Source" = "https://github.com/emolter/pylanetary"
"Docs" = "https://pylanetary.readthedocs.io/en/latest/"
"Bug Reports" = "https://github.com/emolter/pylanetary/issues"

[tool.sphinx-pyproject]
github_username = "emolter"
github_repository = "pylanetary"
author = "Ned Molter"
project = "pylanetary"
language = "en"
extensions = [
    "sphinx.ext.autodoc",
    "nbsphinx",
    "sphinx.ext.napoleon",
    "sphinx.ext.autosectionlabel",
    "sphinx_copybutton",
]
sphinxemoji_style = "twemoji"
html_theme = "furo"
html_static_path = ['_static']
html_logo = "logo.png"
html_theme_options = {"light_css_variables" = {"color-brand-primary" = "#002f87"}, "dark_css_variables" = {"color-brand-primary" = "#00a7e1"}}
templates_path = ['_templates']
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

[tool.setuptools]
packages = ["pylanetary"]

[tool.setuptools.package-data]
pylanetary = ["*.txt", "*.npy", "*.hdf5", "*.yaml"]


[tool.coverage.run]
omit = [
  "pylanetary/conftest.py",
  "pylanetary/*setup_package*",
  "pylanetary/tests/*",
  "pylanetary/*/tests/*",
  "pylanetary/extern/*",
  "pylanetary/version*",
  "*/pylanetary/conftest.py",
  "*/pylanetary/*setup_package*",
  "*/pylanetary/tests/*",
  "*/pylanetary/*/tests/*",
  "*/pylanetary/extern/*",
  "*/pylanetary/version*",
]

[tool.coverage.report]
exclude_also = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain about packages we have installed
  "except ImportError",
  # Don't complain if tests don't hit assertions
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain about script hooks
  "def main(.*):",
  # Ignore branches that don't pertain to this version of Python
  "pragma: py{ignore_python_version}",
  # Don't complain about IPython completion helper
  "def _ipython_key_completions_",
]

[build-system]
requires = ["setuptools",
            "setuptools_scm",
            "wheel",
			"extension-helpers",
			]
build-backend = 'setuptools.build_meta'